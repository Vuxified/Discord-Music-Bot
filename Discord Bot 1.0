import discord
from discord.ext import commands
from discord.utils import get
import yt_dlp
import nacl
# These are all the libraries we need ^, to run it on your PC you need to install all the libraries and ffmpeg.

intents = discord.Intents.all()
intents.members = True
client = commands.Bot(command_prefix='$', intents=intents)
# This is the prefix for the bot.

queue = []
#This is making a queue for the bot to play songs.

@client.event
async def on_ready():
    print("Bot is now ready")
    print("*****************")
# Using decorators, this is a function that syncs with the discord API to tell us when the bot is ready, it lets us use concurrency and asynchronous functions.

@client.command()
async def basiccommands(ctx):
    await ctx.send("$python, $play, $show_queue, $skip")
# This is the code for the command "$basiccommands" which just lists the commands in discord.    

@client.command()
async def python(ctx):
    await ctx.send("Python is an interpreted, object-oriented, high-level programming language...")
# This is another command that defines what Python is lol

@client.command()
async def play(ctx, *, song):
    voice_channel = ctx.author.voice.channel
    voice_client = get(client.voice_clients, guild=ctx.guild)

    if not voice_channel:
        await ctx.send("You must be in a voice channel to use this command.")
        return

    if voice_client and voice_client.is_connected():
        await voice_client.move_to(voice_channel)
    else:
        voice_client = await voice_channel.connect()

    # Search for the song using yt-dlp
    url = await search_song(song)

    if not url:
        await ctx.send("Unable to find the requested song.")
        return

    # Add the URL to the queue
    queue.append(url)

    if not voice_client.is_playing():
        await play_song(ctx, voice_client)
#The above play command plays the song, converts it into a URL and adds it to the queue. It also checks if the user is in a voice channel and if the bot is in a voice channel.

@client.command()
async def show_queue(ctx):
    if not queue:
        await ctx.send("The queue is empty.")
        return

    queue_list = "\n".join(queue)
    await ctx.send(f"Queue:\n{queue_list}")
# This command shows the queue and whatever is in it.

@client.command()
async def skip(ctx):
    voice_client = get(client.voice_clients, guild=ctx.guild)

    if voice_client and voice_client.is_playing():
        voice_client.stop()
# This command skips the song that is currently playing and plays the next song in the queue.

async def search_song(song):
    ydl_opts = {
        'format': 'bestaudio/best',
        'quiet': True,
        'default_search': 'auto',
        'source_address': '0.0.0.0',
        'extractor_args': {'youtube': ' --no-playlist'}
    }
# This is the code for the search function, it uses yt-dlp to search for the song and convert it into a URL.

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        try:
            info = ydl.extract_info(f"ytsearch:{song}", download=False)
            url = info['entries'][0]['url']
            return url
        except Exception:
            return None
# This is the code for the search function, it uses yt-dlp to search for the song and convert it into a URL.

async def play_song(ctx, voice_client):
    if not queue:
        await ctx.send("The queue is empty.")
        await voice_client.disconnect()
        return
# This is the code for the play function, it plays the song and checks if the queue is empty.

    url = queue.pop(0)  # Get the first song URL from the queue
    voice_client.play(discord.FFmpegPCMAudio(url, options="-vn"))
    await ctx.send(f"Now playing: {url}")
# This is the code for the play function, it plays the song and checks if the queue is empty.

client.run('MTExOTEwNjAxODcxNTExOTY5Ng.GVS34v.WI1srqM9iia7fb4mXpa6is_RLW31rio1A4hc8E')
